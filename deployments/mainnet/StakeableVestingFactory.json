{
  "address": "0xcdee293Cc814FE665aed2a3e20Bff8b23f85529f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_api3Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_api3Pool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "deployer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "startTimestamp",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "endTimestamp",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint192",
          "name": "amount",
          "type": "uint192"
        }
      ],
      "name": "DeployedStakeableVesting",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "api3Token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "startTimestamp",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "endTimestamp",
          "type": "uint32"
        },
        {
          "internalType": "uint192",
          "name": "amount",
          "type": "uint192"
        }
      ],
      "name": "deployStakeableVesting",
      "outputs": [
        {
          "internalType": "address",
          "name": "stakeableVesting",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeableVestingImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc68e81e373a44051308b422ef69d51d0440736603ba93df434fd220657c7f8ed",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x07b589f06bD0A5324c4E2376d66d2F4F25921DE1",
    "contractAddress": null,
    "transactionIndex": 102,
    "gasUsed": "1738825",
    "logsBloom": "0x
    "blockHash": "0x207966f9f01971ff3f1b1a24114830d88fa931084bc4fe8f5c2afb0735600760",
    "transactionHash": "0xc68e81e373a44051308b422ef69d51d0440736603ba93df434fd220657c7f8ed",
    "logs": [
      {
        "transactionIndex": 102,
        "blockNumber": 16596991,
        "transactionHash": "0xc68e81e373a44051308b422ef69d51d0440736603ba93df434fd220657c7f8ed",
        "address": "0x79661fE75c0C0394787422FE56Eb05A4A4A8E884",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cdee293cc814fe665aed2a3e20bff8b23f85529f"
        ],
        "data": "0x",
        "logIndex": 283,
        "blockHash": "0x207966f9f01971ff3f1b1a24114830d88fa931084bc4fe8f5c2afb0735600760"
      },
      {
        "transactionIndex": 102,
        "blockNumber": 16596991,
        "transactionHash": "0xc68e81e373a44051308b422ef69d51d0440736603ba93df434fd220657c7f8ed",
        "address": "0x79661fE75c0C0394787422FE56Eb05A4A4A8E884",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000cdee293cc814fe665aed2a3e20bff8b23f85529f",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x",
        "logIndex": 284,
        "blockHash": "0x207966f9f01971ff3f1b1a24114830d88fa931084bc4fe8f5c2afb0735600760"
      }
    ],
    "blockNumber": 16596991,
    "cumulativeGasUsed": "12591651",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x0b38210ea11411557c13457D4dA7dC6ea731B88a", "0x6dd655f10d4b9E242aE186D9050B68F725c76d76"],
  "numDeployments": 1,
  "solcInputHash": "a4b13d8966d833f9703d19e01688ddfd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_api3Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_api3Pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"startTimestamp\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"endTimestamp\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint192\",\"name\":\"amount\",\"type\":\"uint192\"}],\"name\":\"DeployedStakeableVesting\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"api3Token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"startTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint192\",\"name\":\"amount\",\"type\":\"uint192\"}],\"name\":\"deployStakeableVesting\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"stakeableVesting\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeableVestingImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_api3Pool\":\"Api3Pool address\",\"_api3Token\":\"Api3Token address\"}},\"deployStakeableVesting(address,uint32,uint32,uint192)\":{\"details\":\"The sender needs to approve `amount` API3 tokens to this contract before calling this. The sender will be the owner of the StakeableVesting clone, allowing it to revoke the vesting.\",\"params\":{\"amount\":\"Amount of tokens to be vested over the period\",\"beneficiary\":\"Beneficiary of the vesting\",\"endTimestamp\":\"Ending timestamp of the vesting\",\"startTimestamp\":\"Starting timestamp of the vesting\"},\"returns\":{\"stakeableVesting\":\"StakeableVesting clone address\"}}},\"title\":\"Contract that deploys a StakeableVesting implementation and allows it to be cloned to create vestings\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"api3Token()\":{\"notice\":\"Api3Token address\"},\"deployStakeableVesting(address,uint32,uint32,uint192)\":{\"notice\":\"Deploys a StakeableVesting clone and transfers the vesting amount to it from the sender\"},\"stakeableVestingImplementation()\":{\"notice\":\"StakeableVesting implementation address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakeableVestingFactory.sol\":\"StakeableVestingFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x888d64d221d52c31d015b76e50ca1af5ef8ff076550810b49cea6b01d8267a10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"api3-dao/packages/pool/contracts/interfaces/v0.8/IApi3Pool.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ITimelockUtils.sol\\\";\\n\\ninterface IApi3Pool is ITimelockUtils {\\n}\\n\",\"keccak256\":\"0xa957b9711e6459ffb3d9900b04089f9b9d7c2277ca7a7829bd098925ffae7bc1\",\"license\":\"MIT\"},\"api3-dao/packages/pool/contracts/interfaces/v0.8/IClaimUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IStakeUtils.sol\\\";\\n\\ninterface IClaimUtils is IStakeUtils {\\n    event PaidOutClaim(\\n        address indexed recipient,\\n        uint256 amount,\\n        uint256 totalStake\\n        );\\n\\n    function payOutClaim(\\n        address recipient,\\n        uint256 amount\\n        )\\n        external;\\n}\\n\",\"keccak256\":\"0x1b107c266b921cd2b5ed34a27f83a28cd3e32e7184d9fe4fb316c4270c41b561\",\"license\":\"MIT\"},\"api3-dao/packages/pool/contracts/interfaces/v0.8/IDelegationUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IRewardUtils.sol\\\";\\n\\ninterface IDelegationUtils is IRewardUtils {\\n    event Delegated(\\n        address indexed user,\\n        address indexed delegate,\\n        uint256 shares,\\n        uint256 totalDelegatedTo\\n        );\\n\\n    event Undelegated(\\n        address indexed user,\\n        address indexed delegate,\\n        uint256 shares,\\n        uint256 totalDelegatedTo\\n        );\\n\\n    event UpdatedDelegation(\\n        address indexed user,\\n        address indexed delegate,\\n        bool delta,\\n        uint256 shares,\\n        uint256 totalDelegatedTo\\n        );\\n\\n    function delegateVotingPower(address delegate) \\n        external;\\n\\n    function undelegateVotingPower()\\n        external;\\n\\n    \\n}\\n\",\"keccak256\":\"0xf64b7f6efb7faafc4fb303533a575f1ed8af7d2f4cee84417aea744cadd8f437\",\"license\":\"MIT\"},\"api3-dao/packages/pool/contracts/interfaces/v0.8/IGetterUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IStateUtils.sol\\\";\\n\\ninterface IGetterUtils is IStateUtils {\\n    function userVotingPowerAt(\\n        address userAddress,\\n        uint256 _block\\n        )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function userVotingPower(address userAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function totalSharesAt(uint256 _block)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function totalShares()\\n        external\\n        view\\n        returns (uint256);\\n\\n    function userSharesAt(\\n        address userAddress,\\n        uint256 _block\\n        )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function userShares(address userAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function userStake(address userAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function delegatedToUserAt(\\n        address userAddress,\\n        uint256 _block\\n        )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function delegatedToUser(address userAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function userDelegateAt(\\n        address userAddress,\\n        uint256 _block\\n        )\\n        external\\n        view\\n        returns (address);\\n\\n    function userDelegate(address userAddress)\\n        external\\n        view\\n        returns (address);\\n\\n    function userLocked(address userAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getUser(address userAddress)\\n        external\\n        view\\n        returns (\\n            uint256 unstaked,\\n            uint256 vesting,\\n            uint256 unstakeShares,\\n            uint256 unstakeAmount,\\n            uint256 unstakeScheduledFor,\\n            uint256 lastDelegationUpdateTimestamp,\\n            uint256 lastProposalTimestamp\\n            );\\n}\\n\",\"keccak256\":\"0x48b9ecad46b4742276636da084ebc31641191daed727df9b54ec51ee292c4d6c\",\"license\":\"MIT\"},\"api3-dao/packages/pool/contracts/interfaces/v0.8/IRewardUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IGetterUtils.sol\\\";\\n\\ninterface IRewardUtils is IGetterUtils {\\n    event MintedReward(\\n        uint256 indexed epochIndex,\\n        uint256 amount,\\n        uint256 newApr,\\n        uint256 totalStake\\n        );\\n\\n    function mintReward()\\n        external;\\n}\\n\",\"keccak256\":\"0xc4e316f4abc5156214ca812dc8b9f1d5d7cb3de769b313b2f47efa0334071f18\",\"license\":\"MIT\"},\"api3-dao/packages/pool/contracts/interfaces/v0.8/IStakeUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ITransferUtils.sol\\\";\\n\\ninterface IStakeUtils is ITransferUtils{\\n    event Staked(\\n        address indexed user,\\n        uint256 amount,\\n        uint256 mintedShares,\\n        uint256 userUnstaked,\\n        uint256 userShares,\\n        uint256 totalShares,\\n        uint256 totalStake\\n        );\\n\\n    event ScheduledUnstake(\\n        address indexed user,\\n        uint256 amount,\\n        uint256 shares,\\n        uint256 scheduledFor,\\n        uint256 userShares\\n        );\\n\\n    event Unstaked(\\n        address indexed user,\\n        uint256 amount,\\n        uint256 userUnstaked,\\n        uint256 totalShares,\\n        uint256 totalStake\\n        );\\n\\n    function stake(uint256 amount)\\n        external;\\n\\n    function depositAndStake(uint256 amount)\\n        external;\\n\\n    function scheduleUnstake(uint256 amount)\\n        external;\\n\\n    function unstake(address userAddress)\\n        external\\n        returns (uint256);\\n\\n    function unstakeAndWithdraw()\\n        external;\\n}\\n\",\"keccak256\":\"0x0af3f6910c1ef7ef9880c6ac8418e0e2b2ebf58ae9ee5c659387dc326d1c556d\",\"license\":\"MIT\"},\"api3-dao/packages/pool/contracts/interfaces/v0.8/IStateUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IStateUtils {\\n    event SetDaoApps(\\n        address agentAppPrimary,\\n        address agentAppSecondary,\\n        address votingAppPrimary,\\n        address votingAppSecondary\\n        );\\n\\n    event SetClaimsManagerStatus(\\n        address indexed claimsManager,\\n        bool indexed status\\n        );\\n\\n    event SetStakeTarget(uint256 stakeTarget);\\n\\n    event SetMaxApr(uint256 maxApr);\\n\\n    event SetMinApr(uint256 minApr);\\n\\n    event SetUnstakeWaitPeriod(uint256 unstakeWaitPeriod);\\n\\n    event SetAprUpdateStep(uint256 aprUpdateStep);\\n\\n    event SetProposalVotingPowerThreshold(uint256 proposalVotingPowerThreshold);\\n\\n    event UpdatedLastProposalTimestamp(\\n        address indexed user,\\n        uint256 lastProposalTimestamp,\\n        address votingApp\\n        );\\n\\n    function setDaoApps(\\n        address _agentAppPrimary,\\n        address _agentAppSecondary,\\n        address _votingAppPrimary,\\n        address _votingAppSecondary\\n        )\\n        external;\\n\\n    function setClaimsManagerStatus(\\n        address claimsManager,\\n        bool status\\n        )\\n        external;\\n\\n    function setStakeTarget(uint256 _stakeTarget)\\n        external;\\n\\n    function setMaxApr(uint256 _maxApr)\\n        external;\\n\\n    function setMinApr(uint256 _minApr)\\n        external;\\n\\n    function setUnstakeWaitPeriod(uint256 _unstakeWaitPeriod)\\n        external;\\n\\n    function setAprUpdateStep(uint256 _aprUpdateStep)\\n        external;\\n\\n    function setProposalVotingPowerThreshold(uint256 _proposalVotingPowerThreshold)\\n        external;\\n\\n    function updateLastProposalTimestamp(address userAddress)\\n        external;\\n\\n    function isGenesisEpoch()\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x0be1877881ddddc408f4c2b3b81a61679a2a6c8bd34af1d7fbc2b6d53ab280d1\",\"license\":\"MIT\"},\"api3-dao/packages/pool/contracts/interfaces/v0.8/ITimelockUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IClaimUtils.sol\\\";\\n\\ninterface ITimelockUtils is IClaimUtils {\\n    event DepositedByTimelockManager(\\n        address indexed user,\\n        uint256 amount,\\n        uint256 userUnstaked\\n        );\\n\\n    event DepositedVesting(\\n        address indexed user,\\n        uint256 amount,\\n        uint256 start,\\n        uint256 end,\\n        uint256 userUnstaked,\\n        uint256 userVesting\\n        );\\n\\n    event VestedTimelock(\\n        address indexed user,\\n        uint256 amount,\\n        uint256 userVesting\\n        );\\n\\n    function deposit(\\n        address source,\\n        uint256 amount,\\n        address userAddress\\n        )\\n        external;\\n\\n    function depositWithVesting(\\n        address source,\\n        uint256 amount,\\n        address userAddress,\\n        uint256 releaseStart,\\n        uint256 releaseEnd\\n        )\\n        external;\\n\\n    function updateTimelockStatus(address userAddress)\\n        external;\\n}\\n\",\"keccak256\":\"0x02cba776443df7578de9785b128a06d77a39008b923d9c2cab298a60e049ee76\",\"license\":\"MIT\"},\"api3-dao/packages/pool/contracts/interfaces/v0.8/ITransferUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IDelegationUtils.sol\\\";\\n\\ninterface ITransferUtils is IDelegationUtils{\\n    event Deposited(\\n        address indexed user,\\n        uint256 amount,\\n        uint256 userUnstaked\\n        );\\n\\n    event Withdrawn(\\n        address indexed user,\\n        uint256 amount,\\n        uint256 userUnstaked\\n        );\\n\\n    event CalculatingUserLocked(\\n        address indexed user,\\n        uint256 nextIndEpoch,\\n        uint256 oldestLockedEpoch\\n        );\\n\\n    event CalculatedUserLocked(\\n        address indexed user,\\n        uint256 amount\\n        );\\n\\n    function depositRegular(uint256 amount)\\n        external;\\n\\n    function withdrawRegular(uint256 amount)\\n        external;\\n\\n    function precalculateUserLocked(\\n        address userAddress,\\n        uint256 noEpochsPerIteration\\n        )\\n        external\\n        returns (bool finished);\\n\\n    function withdrawPrecalculated(uint256 amount)\\n        external;\\n}\\n\",\"keccak256\":\"0xfa96fa37bce7c770c4fc20c7189fa6e4fccb4485dbb404aaee99a0e0d26aa975\",\"license\":\"MIT\"},\"contracts/StakeableVesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IStakeableVesting.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"api3-dao/packages/pool/contracts/interfaces/v0.8/IApi3Pool.sol\\\";\\n\\n/// @title Contract that implements a stakeable vesting of API3 tokens\\n/// allocated to a beneficiary, which is revocable by the owner of this\\n/// contract\\n/// @notice This contract is an implementation that is required to be cloned by\\n/// a StakeableVestingFactory contract. The beneficiary of the vesting is\\n/// expected to interact with this contract through a generic, ABI-based UI\\n/// such as Etherscan's. See the repo's README for instructions.\\n/// @dev The contract implements the Api3Pool interface explicitly instead of\\n/// acting as a general call forwarder (with only Api3Token interactions being\\n/// restricted) because the user will not be provided with a trusted frontend\\n/// that will encode the calls. This implementation allows general purpose\\n/// contract interaction frontends to be used.\\ncontract StakeableVesting is Ownable, IStakeableVesting {\\n    struct Vesting {\\n        uint32 startTimestamp;\\n        uint32 endTimestamp;\\n        uint192 amount;\\n    }\\n\\n    /// @notice Api3Token address\\n    address public immutable override api3Token;\\n\\n    /// @notice Api3Pool address\\n    address public immutable api3Pool;\\n\\n    /// @notice Beneficiary of the vesting\\n    address public override beneficiary;\\n\\n    /// @notice Vesting parameters, including the schedule and the amount\\n    Vesting public override vesting;\\n\\n    /// @dev Prevents tokens from being locked by setting an unreasonably late\\n    /// vesting end timestamp. The vesting periods are expected to be 4 years,\\n    /// and we have 1 year of buffer here in case the vesting is required to\\n    /// start in the future.\\n    uint256\\n        private constant MAXIMUM_TIME_BETWEEN_INITIALIZATION_AND_VESTING_END =\\n        5 * 365 days;\\n\\n    /// @dev Reverts if the sender is not the beneficiary\\n    modifier onlyBeneficiary() {\\n        require(msg.sender == beneficiary, \\\"Sender not beneficiary\\\");\\n        _;\\n    }\\n\\n    /// @dev This contract is means to be an implementation for\\n    /// StakeableVestingFactory to clone. To prevent the implementaion from\\n    /// being used, the contract is rendered uninitializable and the ownership\\n    /// is renounced.\\n    /// @param _api3Token Api3Token address\\n    /// @param _api3Pool Api3Pool address\\n    constructor(address _api3Token, address _api3Pool) {\\n        require(_api3Token != address(0), \\\"Api3Token address zero\\\");\\n        api3Token = _api3Token;\\n        require(_api3Pool != address(0), \\\"Api3Pool address zero\\\");\\n        api3Pool = _api3Pool;\\n        beneficiary = 0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF;\\n        renounceOwnership();\\n    }\\n\\n    /// @notice Initializes a newly cloned StakeableVesting\\n    /// @dev Since beneficiary is required to be zero address, only clones of\\n    /// this contract can be initialized.\\n    /// Anyone can initialize a StakeableVesting clone. The user is required to\\n    /// prevent others from initializing their clones, for example, by\\n    /// initializing the clone in the same transaction as it is deployed in.\\n    /// The StakeableVesting needs to have exactly `_amount` API3 tokens.\\n    /// @param _owner Owner of this StakeableVesting clone, i.e., the account\\n    /// that can revoke the vesting\\n    /// @param _beneficiary Beneficiary of the vesting\\n    /// @param _startTimestamp Starting timestamp of the vesting\\n    /// @param _endTimestamp Ending timestamp of the vesting\\n    /// @param _amount Amount of tokens to be vested over the period\\n    function initialize(\\n        address _owner,\\n        address _beneficiary,\\n        uint32 _startTimestamp,\\n        uint32 _endTimestamp,\\n        uint192 _amount\\n    ) external override {\\n        require(beneficiary == address(0), \\\"Already initialized\\\");\\n        require(_owner != address(0), \\\"Owner address zero\\\");\\n        require(_beneficiary != address(0), \\\"Beneficiary address zero\\\");\\n        require(_startTimestamp != 0, \\\"Start timestamp zero\\\");\\n        require(_endTimestamp > _startTimestamp, \\\"End not later than start\\\");\\n        require(\\n            _endTimestamp <=\\n                block.timestamp +\\n                    MAXIMUM_TIME_BETWEEN_INITIALIZATION_AND_VESTING_END,\\n            \\\"End is too far in the future\\\"\\n        );\\n        require(_amount != 0, \\\"Amount zero\\\");\\n        require(\\n            IERC20(api3Token).balanceOf(address(this)) == _amount,\\n            \\\"Balance is not vesting amount\\\"\\n        );\\n        _transferOwnership(_owner);\\n        beneficiary = _beneficiary;\\n        vesting = Vesting({\\n            startTimestamp: _startTimestamp,\\n            endTimestamp: _endTimestamp,\\n            amount: _amount\\n        });\\n    }\\n\\n    /// @notice Called by the owner to set the beneficiary\\n    /// @dev This can be used to revoke the vesting by setting the beneficiary\\n    /// to be the owner, or to update the beneficiary address, e.g., because\\n    /// the previous beneficiary account was compromised\\n    /// @param _beneficiary Beneficiary of the vesting\\n    function setBeneficiary(address _beneficiary) external override onlyOwner {\\n        require(_beneficiary != address(0), \\\"Beneficiary address zero\\\");\\n        beneficiary = _beneficiary;\\n        emit SetBeneficiary(_beneficiary);\\n    }\\n\\n    /// @notice Called by the owner to withdraw all API3 tokens\\n    /// @dev This function does not modify the state on purpose, so that the\\n    /// vesting can easily be reinstituted by returning the withdrawn amount\\n    function withdrawAsOwner() external override onlyOwner {\\n        uint256 withdrawalAmount = IERC20(api3Token).balanceOf(address(this));\\n        require(withdrawalAmount != 0, \\\"No balance to withdraw\\\");\\n        IERC20(api3Token).transfer(msg.sender, withdrawalAmount);\\n        emit WithdrawnAsOwner(withdrawalAmount);\\n    }\\n\\n    /// @notice Called by the beneficiary as many tokens the vesting schedule\\n    /// allows\\n    function withdrawAsBeneficiary() external override onlyBeneficiary {\\n        uint256 balance = IERC20(api3Token).balanceOf(address(this));\\n        require(balance != 0, \\\"Balance zero\\\");\\n        uint256 totalBalance = balance + poolBalance();\\n        uint256 unvestedAmountInTotalBalance = unvestedAmount();\\n        require(\\n            totalBalance > unvestedAmountInTotalBalance,\\n            \\\"Tokens in balance not vested yet\\\"\\n        );\\n        uint256 vestedAmountInTotalBalance = totalBalance -\\n            unvestedAmountInTotalBalance;\\n        uint256 withdrawalAmount = vestedAmountInTotalBalance > balance\\n            ? balance\\n            : vestedAmountInTotalBalance;\\n        IERC20(api3Token).transfer(msg.sender, withdrawalAmount);\\n        emit WithdrawnAsBeneficiary(withdrawalAmount);\\n    }\\n\\n    /// @notice Called by the beneficiary to have the StakeableVesting deposit\\n    /// tokens at the pool\\n    /// @param amount Amount of tokens\\n    function depositAtPool(uint256 amount) external override onlyBeneficiary {\\n        IERC20(api3Token).approve(api3Pool, amount);\\n        IApi3Pool(api3Pool).depositRegular(amount);\\n    }\\n\\n    /// @notice Called by the beneficiary to have the StakeableVesting withdraw\\n    /// tokens from the pool\\n    /// @param amount Amount of tokens\\n    function withdrawAtPool(uint256 amount) external override onlyBeneficiary {\\n        IApi3Pool(api3Pool).withdrawRegular(amount);\\n    }\\n\\n    /// @notice Called by the beneficiary to have the StakeableVesting withdraw\\n    /// tokens from the pool based on the precalculated amount of locked\\n    /// staking rewards\\n    /// @dev This is only needed if the gas cost of calculating the amount of\\n    /// locked staking rewards exceeds the block gas limit. See the Api3Pool\\n    /// code for more details.\\n    /// `precalculateUserLocked()` at Api3Pool needs to be called before using\\n    /// this function. Since anyone can call it for any user address, it is not\\n    /// included in this contract.\\n    /// @param amount Amount of tokens\\n    function withdrawPrecalculatedAtPool(\\n        uint256 amount\\n    ) external override onlyBeneficiary {\\n        IApi3Pool(api3Pool).withdrawPrecalculated(amount);\\n    }\\n\\n    /// @notice Called by the beneficiary to have the StakeableVesting stake\\n    /// tokens at the pool\\n    /// @param amount Amount of tokens\\n    function stakeAtPool(uint256 amount) external override onlyBeneficiary {\\n        IApi3Pool(api3Pool).stake(amount);\\n    }\\n\\n    /// @notice Called by the beneficiary to have the StakeableVesting schedule\\n    /// an unstaking of tokens at the pool\\n    /// @param amount Amount of tokens\\n    function scheduleUnstakeAtPool(\\n        uint256 amount\\n    ) external override onlyBeneficiary {\\n        IApi3Pool(api3Pool).scheduleUnstake(amount);\\n    }\\n\\n    /// @notice Called by the beneficiary to have the unstaking that the\\n    /// StakeableVesting has scheduled to be executed\\n    /// @dev Anyone can call this function at Api3Pool with the\\n    /// StakeableVesting address. This function is implemented for the\\n    /// convenience of the user.\\n    function unstakeAtPool() external override {\\n        IApi3Pool(api3Pool).unstake(address(this));\\n    }\\n\\n    /// @notice Called by the beneficiary to have the StakeableVesting delegate\\n    /// its voting power at the pool\\n    /// @param delegate Address of the account that the voting power will be\\n    /// delegated to\\n    function delegateAtPool(\\n        address delegate\\n    ) external override onlyBeneficiary {\\n        IApi3Pool(api3Pool).delegateVotingPower(delegate);\\n    }\\n\\n    /// @notice Called by the beneficiary to have the StakeableVesting\\n    /// undelegate its voting power at the pool\\n    function undelegateAtPool() external override onlyBeneficiary {\\n        IApi3Pool(api3Pool).undelegateVotingPower();\\n    }\\n\\n    function stateAtPool()\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 unstaked,\\n            uint256 staked,\\n            uint256 unstaking,\\n            uint256 unstakeScheduledFor,\\n            uint256 lockedStakingRewards,\\n            address delegate,\\n            uint256 lastDelegationUpdateTimestamp\\n        )\\n    {\\n        delegate = IApi3Pool(api3Pool).userDelegate(address(this));\\n        lockedStakingRewards = IApi3Pool(api3Pool).userLocked(address(this));\\n        staked = IApi3Pool(api3Pool).userStake(address(this));\\n        (\\n            unstaked,\\n            ,\\n            unstaking,\\n            ,\\n            unstakeScheduledFor,\\n            lastDelegationUpdateTimestamp,\\n\\n        ) = IApi3Pool(api3Pool).getUser(address(this));\\n    }\\n\\n    /// @notice Returns the amount of tokens that are yet to be vested based on\\n    /// the schedule\\n    /// @return Amount of unvested tokens\\n    function unvestedAmount() public view override returns (uint256) {\\n        (uint32 startTimestamp, uint32 endTimestamp, uint192 amount) = (\\n            vesting.startTimestamp,\\n            vesting.endTimestamp,\\n            vesting.amount\\n        );\\n        if (block.timestamp <= startTimestamp) {\\n            return amount;\\n        } else if (block.timestamp >= endTimestamp) {\\n            return 0;\\n        } else {\\n            uint256 passedTime = block.timestamp - startTimestamp;\\n            uint256 totalTime = endTimestamp - startTimestamp;\\n            return amount - (amount * passedTime) / totalTime;\\n        }\\n    }\\n\\n    /// @notice Returns the total balance of StakeableVesting at the pool\\n    /// @dev Even though it is not certain that the beneficiary will be able to\\n    /// unstake the funds that are currently staked or being unstaked without\\n    /// getting slashed, the contract still counts them towards their total\\n    /// balance in favor of the beneficiary\\n    /// @return Pool balance\\n    function poolBalance() private view returns (uint256) {\\n        uint256 staked = IApi3Pool(api3Pool).userStake(address(this));\\n        (uint256 unstaked, , uint256 unstaking, , , , ) = IApi3Pool(api3Pool)\\n            .getUser(address(this));\\n        return staked + unstaked + unstaking;\\n    }\\n}\\n\",\"keccak256\":\"0xe1e253c76b6eda9902919a7508c48212098333cd0c72f49b495d82162c9de2ad\",\"license\":\"MIT\"},\"contracts/StakeableVestingFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./interfaces/IStakeableVestingFactory.sol\\\";\\nimport \\\"./StakeableVesting.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Contract that deploys a StakeableVesting implementation and allows\\n/// it to be cloned to create vestings\\ncontract StakeableVestingFactory is IStakeableVestingFactory {\\n    /// @notice Api3Token address\\n    address public immutable override api3Token;\\n\\n    /// @notice StakeableVesting implementation address\\n    address public immutable override stakeableVestingImplementation;\\n\\n    /// @param _api3Token Api3Token address\\n    /// @param _api3Pool Api3Pool address\\n    constructor(address _api3Token, address _api3Pool) {\\n        require(_api3Token != address(0), \\\"Api3Token address zero\\\");\\n        api3Token = _api3Token;\\n        stakeableVestingImplementation = address(\\n            new StakeableVesting(_api3Token, _api3Pool)\\n        );\\n    }\\n\\n    /// @notice Deploys a StakeableVesting clone and transfers the vesting\\n    /// amount to it from the sender\\n    /// @dev The sender needs to approve `amount` API3 tokens to this contract\\n    /// before calling this.\\n    /// The sender will be the owner of the StakeableVesting clone, allowing it\\n    /// to revoke the vesting.\\n    /// @param beneficiary Beneficiary of the vesting\\n    /// @param startTimestamp Starting timestamp of the vesting\\n    /// @param endTimestamp Ending timestamp of the vesting\\n    /// @param amount Amount of tokens to be vested over the period\\n    /// @return stakeableVesting StakeableVesting clone address\\n    function deployStakeableVesting(\\n        address beneficiary,\\n        uint32 startTimestamp,\\n        uint32 endTimestamp,\\n        uint192 amount\\n    ) external override returns (address stakeableVesting) {\\n        stakeableVesting = Clones.cloneDeterministic(\\n            stakeableVestingImplementation,\\n            keccak256(\\n                abi.encodePacked(\\n                    beneficiary,\\n                    startTimestamp,\\n                    endTimestamp,\\n                    amount,\\n                    msg.sender\\n                )\\n            )\\n        );\\n        IERC20(api3Token).transferFrom(msg.sender, stakeableVesting, amount);\\n        IStakeableVesting(stakeableVesting).initialize(\\n            msg.sender,\\n            beneficiary,\\n            startTimestamp,\\n            endTimestamp,\\n            amount\\n        );\\n        emit DeployedStakeableVesting(\\n            msg.sender,\\n            beneficiary,\\n            startTimestamp,\\n            endTimestamp,\\n            amount\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x9fa688eb54ea40525bc6b978f4b894da672b28e12ecbce9f66ef8881c9e9e0eb\",\"license\":\"MIT\"},\"contracts/interfaces/IStakeableVesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IStakeableVesting {\\n    event SetBeneficiary(address beneficiary);\\n\\n    event WithdrawnAsBeneficiary(uint256 amount);\\n\\n    event WithdrawnAsOwner(uint256 amount);\\n\\n    function initialize(\\n        address _owner,\\n        address _beneficiary,\\n        uint32 startTimestamp,\\n        uint32 endTimestamp,\\n        uint192 amount\\n    ) external;\\n\\n    function setBeneficiary(address _beneficiary) external;\\n\\n    function withdrawAsOwner() external;\\n\\n    function withdrawAsBeneficiary() external;\\n\\n    function depositAtPool(uint256 amount) external;\\n\\n    function withdrawAtPool(uint256 amount) external;\\n\\n    function withdrawPrecalculatedAtPool(uint256 amount) external;\\n\\n    function stakeAtPool(uint256 amount) external;\\n\\n    function scheduleUnstakeAtPool(uint256 amount) external;\\n\\n    function unstakeAtPool() external;\\n\\n    function delegateAtPool(address delegate) external;\\n\\n    function undelegateAtPool() external;\\n\\n    function stateAtPool()\\n        external\\n        view\\n        returns (\\n            uint256 unstaked,\\n            uint256 staked,\\n            uint256 unstaking,\\n            uint256 unstakeScheduledFor,\\n            uint256 lockedStakingRewards,\\n            address delegate,\\n            uint256 lastDelegationUpdateTimestamp\\n        );\\n\\n    function unvestedAmount() external view returns (uint256);\\n\\n    function api3Token() external returns (address);\\n\\n    function beneficiary() external returns (address);\\n\\n    function vesting()\\n        external\\n        returns (uint32 startTimestamp, uint32 endTimestamp, uint192 amount);\\n}\\n\",\"keccak256\":\"0xaefc768cbc4a4583349feb01be2f14b5ee3d0ec0be9d67791510c3cd85162a0f\",\"license\":\"MIT\"},\"contracts/interfaces/IStakeableVestingFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IStakeableVestingFactory {\\n    event DeployedStakeableVesting(\\n        address indexed deployer,\\n        address indexed beneficiary,\\n        uint32 startTimestamp,\\n        uint32 endTimestamp,\\n        uint192 amount\\n    );\\n\\n    function deployStakeableVesting(\\n        address beneficiary,\\n        uint32 startTimestamp,\\n        uint32 endTimestamp,\\n        uint192 amount\\n    ) external returns (address stakeableVesting);\\n\\n    function api3Token() external returns (address);\\n\\n    function stakeableVestingImplementation() external returns (address);\\n}\\n\",\"keccak256\":\"0x7b1a771dae8ac990c07ba749f0b25a680c19346853900fbc5f86c019f4a04d4c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80631c3e7dd814610046578063613d517d14610075578063f0f0ec011461009c575b600080fd5b6100596100543660046103b7565b6100c3565b6040516001600160a01b03909116815260200160405180910390f35b6100597f000000000000000000000000000000000000000000000000000000000000000081565b6100597f000000000000000000000000000000000000000000000000000000000000000081565b60408051606086811b6bffffffffffffffffffffffff19908116602084015260e087811b6001600160e01b031990811660348601529087901b1660388401529284901b67ffffffffffffffff1916603c83015233901b9091166054820152600090610168907f000000000000000000000000000000000000000000000000000000000000000090606801604051602081830303815290604052805190602001206102f7565b6040516323b872dd60e01b81523360048201526001600160a01b0380831660248301526001600160c01b03851660448301529192507f0000000000000000000000000000000000000000000000000000000000000000909116906323b872dd906064016020604051808303816000875af11580156101ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020e9190610427565b50604051631b08932960e01b81523360048201526001600160a01b03868116602483015263ffffffff8087166044840152851660648301526001600160c01b0384166084830152821690631b0893299060a401600060405180830381600087803b15801561027b57600080fd5b505af115801561028f573d6000803e3d6000fd5b50506040805163ffffffff8881168252871660208201526001600160c01b0386168183015290516001600160a01b03891693503392507f356d6eba5b7800134f3f2ba91614e7cd962676648d3f42d5c57682427ec70a489181900360600190a3949350505050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008360601b60e81c176000526e5af43d82803e903d91602b57fd5bf38360781b1760205281603760096000f590506001600160a01b0381166103985760405162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c6564000000000000000000604482015260640160405180910390fd5b92915050565b803563ffffffff811681146103b257600080fd5b919050565b600080600080608085870312156103cd57600080fd5b84356001600160a01b03811681146103e457600080fd5b93506103f26020860161039e565b92506104006040860161039e565b915060608501356001600160c01b038116811461041c57600080fd5b939692955090935050565b60006020828403121561043957600080fd5b8151801515811461044957600080fd5b939250505056fea2646970667358221220f65391d47bf49eb499d14f3f05bf21d38ea91af2f9646bb979e8b6c88096e1d264736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_api3Pool": "Api3Pool address",
          "_api3Token": "Api3Token address"
        }
      },
      "deployStakeableVesting(address,uint32,uint32,uint192)": {
        "details": "The sender needs to approve `amount` API3 tokens to this contract before calling this. The sender will be the owner of the StakeableVesting clone, allowing it to revoke the vesting.",
        "params": {
          "amount": "Amount of tokens to be vested over the period",
          "beneficiary": "Beneficiary of the vesting",
          "endTimestamp": "Ending timestamp of the vesting",
          "startTimestamp": "Starting timestamp of the vesting"
        },
        "returns": {
          "stakeableVesting": "StakeableVesting clone address"
        }
      }
    },
    "title": "Contract that deploys a StakeableVesting implementation and allows it to be cloned to create vestings",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "api3Token()": {
        "notice": "Api3Token address"
      },
      "deployStakeableVesting(address,uint32,uint32,uint192)": {
        "notice": "Deploys a StakeableVesting clone and transfers the vesting amount to it from the sender"
      },
      "stakeableVestingImplementation()": {
        "notice": "StakeableVesting implementation address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
